{"version":3,"sources":["app_component/form.component.jsx","app_component/weather.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Form","props","className","response_error","role","error","onSubmit","loadweather","type","name","autoComplete","placeholder","minmaxTemp","min","max","Weather","city","class","WeatherIcon","temp_celcius","temp_max","temp_min","description","App","getWeather","e","a","preventDefault","target","elements","value","country","fetch","api_call","status","setState","json","response","console","log","sys","celcius","calcCelcius","main","temp","weather","get_weathericon","id","state","undefined","icon","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","icons","rangeID","this","Math","floor","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2c5bfaee.chunk.js","sourcesContent":["import React from 'react';\nimport \"./form.style.css\";\n\nconst Form=props=>{\n    return(\n        <div className=\"container\">\n            <div>{props.response_error? response_error():null}</div>\n            <div>{props.error? error():null}</div>\n            <form onSubmit={props.loadweather}>\n            <div className=\"row\">\n                <div className=\"col-md-3 offset-md-2\">\n                    <input type=\"text\" className=\"form-control\" name=\"city\" autoComplete=\"off\" placeholder=\"City\"/>\n                </div>\n                <div className=\"col-md-3\">\n                <input type=\"text\" className=\"form-control\" name=\"country\" autoComplete=\"off\" placeholder=\"Country\"/>\n                </div>\n                <div className=\"col-md-3 mt-md-0-text-md-left\">\n                <button className=\"btn btn-warning\">Get Weather</button>\n                    </div>\n            </div>\n            </form>\n        </div>\n    );\n};\n\nfunction error()\n{\n    return(\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\n            Please Enter City and Country\n        </div>\n    )\n}\n\nfunction response_error()\n{\n    return(\n        <div className=\"alert alert-danger mx-5\" role=\"alert\">\n            Please Enter Correct City or Country\n        </div>\n    )\n}\n\nexport default Form;","import React from \"react\";\n\nconst Weather=props=>{\n    return(\n       <div className=\"container text-light\">\n        <div className=\"cards pt-4\">\n        <h1>{props.city}</h1>\n        <h5 className=\"py-4\">\n        <i class={`wi ${props.WeatherIcon} display-1`}></i>\n        </h5>\n        {props.temp_celcius?   <h1 className=\"py-2\">{props.temp_celcius}&deg;</h1>:null}\n        { /** need to specify curly to call a fn */}\n        {minmaxTemp(props.temp_max,props.temp_min)}\n        <h4 className=\"py-4\">{props.description}</h4>\n        </div>\n       </div>\n        \n    );\n}\n\nfunction minmaxTemp(min,max)\n{\n   if(min && max)\n   {\n    return(\n        <h3>\n            <span className=\"px-4\">Min:{min}&deg;</span>\n            <span className=\"px-4\">Max:{max}&deg;</span>\n        </h3>\n    );\n   }\n}\n\nexport default Weather;","import React from \"react\";\nimport './App.css';\nimport 'weather-icons/css/weather-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Form from './app_component/form.component';\nimport Weather from './app_component/weather.component';\n\nconst API_key=\"ef478a8a8287cf8142992790cfe109d9\";\n\nclass App extends React.Component{\n  constructor()\n  {\n    super();\n    this.state={\n      city:undefined,\n      country:undefined,\n      icon:undefined,\n      main:undefined,\n      celcius:undefined,\n      temp_max:undefined,\n      temp_min:undefined,\n      description:\"\",\n      error:false,\n      response_error:false\n\n    };\n    \n    this.WeatherIcon={\n      Thunderstorm:\"wi-thunderstorms\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-storm-showers\",\n      Snow:\"wi-snow\",\n      Atmosphere:\"wi-fog\",\n      Clear:\"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    };\n\n    }\n  get_weathericon(icons,rangeID)\n  {\n    switch(true)\n    {\n      case rangeID>=200 && rangeID<=232:\n        this.setState({icon:this.WeatherIcon.Thunderstorm});\n        break;\n      case rangeID>=300 && rangeID<=321:\n          this.setState({icon:this.WeatherIcon.Drizzle});\n          break;\n      case rangeID>=500 && rangeID<=531:\n            this.setState({icon:this.WeatherIcon.Rain});\n            break;\n      case rangeID>=600&& rangeID<=632:\n              this.setState({icon:this.WeatherIcon.Snow});\n              break;\n              case rangeID>=700 && rangeID<=781:\n                this.setState({icon:this.WeatherIcon.Atmosphere});\n                break;\n                case rangeID===800:\n                  this.setState({icon:this.WeatherIcon.Clear});\n                  break;\n                  case rangeID>=801 && rangeID<=804:\n                    this.setState({icon:this.WeatherIcon.Clouds});\n                    break;\n                  default:\n                    this.setState({icon:this.WeatherIcon.Clouds});\n\n\n    }\n  }\n  calcCelcius(temp)\n  {\n     var cell=Math.floor(temp-273.15);\n     return cell;\n  };\n  getWeather=async(e)=>{\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n    if(city && country){\n    const api_call=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n    //const response=await api_call.json();\n    if(api_call.status===404)\n    {\n      this.setState({response_error:true});\n\n    }\n  \n      else{\n        const response=await api_call.json();\n      console.log(response.status);\n    this.setState({\n      city:`${response.name},${response.sys.country}`,\n      //country:response.sys.country,\n      celcius:this.calcCelcius(response.main.temp),\n      temp_max:this.calcCelcius(response.main.temp_max),\n      temp_min:this.calcCelcius(response.main.temp_min),\n      description:response.weather[0].main,\n      error:false,\n      response_error:false\n\n    })\n    this.get_weathericon(this.WeatherIcon,response.weather[0].id);\n  }\n  }else{\n    this.setState({error:true});\n  }\n  };\n  render()\n  {\n    return (\n      <div className=\"App\">\n      <Form loadweather={this.getWeather} error={this.state.error} response_error={this.state.response_error}/>\n      <Weather \n      city={this.state.city} \n      country={this.state.country} \n      temp_celcius={this.state.celcius} \n      temp_max={this.state.temp_max} temp_min={this.state.temp_min} \n      description={this.state.description}\n      WeatherIcon={this.state.icon}\n      />\n    </div>\n    );\n  }\n\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}